// //   {/* Search bar
// //   {searchable && (
// //     <div className="relative">
// //       <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
// //       <div className="flex items-center flex-wrap gap-2 pl-8 pr-3 py-2 bg-background border rounded-md">
// //         {appliedTags.map((tag, index) => (
// //           <Badge key={index} variant="secondary" className="flex items-center gap-1">
// //             <Filter className="h-3 w-3" />
// //             {tag}
// //             <X className="h-3 w-3 cursor-pointer" onClick={() => removeFilter(index)} />
// //           </Badge>
// //         ))}
// //         {groupByField && (
// //           <Badge variant="secondary" className="flex items-center gap-1">
// //             <Group className="h-3 w-3" />
// //             Grouped by: {groupByField}
// //             <X className="h-3 w-3 cursor-pointer" onClick={() => setGroupByField(null)} />
// //           </Badge>
// //         )}
// //         {searchQuery && (
// //           <Badge variant="secondary" className="flex items-center gap-1">
// //             <Search className="h-3 w-3" />
// //             {autoDetectedColumns[0]?.label}: {searchQuery}
// //             <X className="h-3 w-3 cursor-pointer" onClick={() => setSearchQuery("")} />
// //           </Badge>
// //         )}
// //         <Input
// //           type="search"
// //           placeholder="Search..."
// //           className="flex-grow border-none shadow-none focus-visible:ring-0 focus-visible:ring-offset-0"
// //           value={searchQuery}
// //           onChange={(e) => setSearchQuery(e.target.value)}
// //         />
// //       </div>
// //     </div>
// //   )}
// //   {(appliedTags.length > 0 || groupByField || searchQuery) && (
// //     <Button
// //       variant="ghost"
// //       size="sm"
// //       className="mt-2"
// //       onClick={() => {
// //         setFilterState({ logicalOperator: "AND", rules: [] });
// //         setActiveFilters({ logicalOperator: "AND", rules: [] });
// //         setAppliedTags([]);
// //         setGroupByField(null);
// //         setSearchQuery("");
// //       }}
// //     >
// //       Clear all filters
// //     </Button>
// //   )}

// //   {/* Filter and grouping buttons */}
// //   <div className="flex flex-wrap gap-2">
// //     {filterable && (
// //       <Dialog>
// //         <DialogTrigger asChild>
// //           <Button variant="outline" size="sm">
// //             <Filter className="h-4 w-4 mr-2" />
// //             Filters
// //           </Button>
// //         </DialogTrigger>
// //         <DialogContent className="sm:max-w-[600px]">
// //           <DialogHeader>
// //             <DialogTitle>Advanced Filters</DialogTitle>
// //           </DialogHeader>

// //           <div className="py-4 space-y-4">
// //             {/* Logic operator selector */}
// //             <div className="flex gap-2">
// //               <Button
// //                 variant={filterState.logicalOperator === "AND" ? "default" : "outline"}
// //                 size="sm"
// //                 onClick={() => setFilterState({ ...filterState, logicalOperator: "AND" })}
// //               >
// //                 AND
// //               </Button>
// //               <Button
// //                 variant={filterState.logicalOperator === "OR" ? "default" : "outline"}
// //                 size="sm"
// //                 onClick={() => setFilterState({ ...filterState, logicalOperator: "OR" })}
// //               >
// //                 OR
// //               </Button>

// //               <div className="ml-auto">
// //                 <Button variant="outline" size="sm" onClick={addFilterRule}>
// //                   <Plus className="h-4 w-4 mr-1" /> Rule
// //                 </Button>
// //               </div>
// //             </div>

// //             {/* Filter rules */}
// //             <div className="space-y-3">
// //               {filterState.rules.map((rule, index) => {
// //                 const column = autoDetectedColumns.find((col) => col.key === rule.field);
// //                 const dataType = column?.type || "string";
// //                 const operators = getOperatorsForType(dataType);

// //                 return (
// //                   <div key={index} className="flex items-center gap-2">
// //                     {/* Field selector */}
// //                     <Select
// //                       value={rule.field}
// //                       onValueChange={(value) => updateFilterRule(index, "field", value)}
// //                     >
// //                       <SelectTrigger className="w-[180px]">
// //                         <SelectValue placeholder="Select field" />
// //                       </SelectTrigger>
// //                       <SelectContent>
// //                         {autoDetectedColumns.map((column) => (
// //                           <SelectItem key={column.key} value={column.key}>
// //                             {column.label}
// //                           </SelectItem>
// //                         ))}
// //                       </SelectContent>
// //                     </Select>

// //                     {/* Operator selector */}
// //                     <Select
// //                       value={rule.operator}
// //                       onValueChange={(value) => updateFilterRule(index, "operator", value)}
// //                     >
// //                       <SelectTrigger className="w-[150px]">
// //                         <SelectValue placeholder="Operator" />
// //                       </SelectTrigger>
// //                       <SelectContent>
// //                         {operators.map((op) => (
// //                           <SelectItem key={op.value} value={op.value}>
// //                             {op.label}
// //                           </SelectItem>
// //                         ))}
// //                       </SelectContent>
// //                     </Select>

// //                     {/* Value input */}
// //                     <Input
// //                       value={rule.value}
// //                       onChange={(e) => updateFilterRule(index, "value", e.target.value)}
// //                       className="flex-1"
// //                       placeholder="Value"
// //                     />

// //                     {/* Button to remove rule */}
// //                     <Button
// //                       variant="ghost"
// //                       size="icon"
// //                       onClick={() => {
// //                         const newRules = [...filterState.rules];
// //                         newRules.splice(index, 1);
// //                         setFilterState({ ...filterState, rules: newRules });
// //                       }}
// //                     >
// //                       <X className="h-4 w-4" />
// //                     </Button>
// //                   </div>
// //                 );
// //               })}

// //               {filterState.rules.length === 0 && (
// //                 <div className="text-center text-muted-foreground py-4">
// //                   No filter rules. Click &quot;Rule&quot; to add one.
// //                 </div>
// //               )}
// //             </div>
// //           </div>

// //           <DialogFooter>
// //             <Button
// //               variant="outline"
// //               onClick={() => {
// //                 setFilterState({ logicalOperator: "AND", rules: [] });
// //                 setActiveFilters({ logicalOperator: "AND", rules: [] });
// //                 setAppliedTags([]);
// //               }}
// //             >
// //               Clear
// //             </Button>
// //             <Button onClick={applyFilter}>Apply</Button>
// //           </DialogFooter>
// //         </DialogContent>
// //       </Dialog>
// //     )}

// //     {groupable && (
// //       <Popover>
// //         <PopoverTrigger asChild>
// //           <Button variant="outline" size="sm">
// //             <Group className="h-4 w-4 mr-2" />
// //             Group by
// //           </Button>
// //         </PopoverTrigger>
// //         <PopoverContent className="w-[200px] p-0" align="start">
// //           <div className="p-2">
// //             <div className="space-y-2">
// //               {autoDetectedColumns.map((column) => (
// //                 <Button
// //                   key={column.key}
// //                   variant={groupByField === column.key ? "default" : "ghost"}
// //                   size="sm"
// //                   className="w-full justify-start"
// //                   onClick={() =>
// //                     setGroupByField(groupByField === column.key ? null : column.key)
// //                   }
// //                 >
// //                   {column.label}
// //                 </Button>
// //               ))}

// //               {groupByField && (
// //                 <Button
// //                   variant="outline"
// //                   size="sm"
// //                   className="w-full mt-2"
// //                   onClick={() => setGroupByField(null)}
// //                 >
// //                   Remove grouping
// //                 </Button>
// //               )}
// //             </div>
// //           </div>
// //         </PopoverContent>
// //       </Popover>
// //     )}
// //   </div>

// <div className="flex flex-wrap gap-2">
//         {filterable && (
//           <Dialog>
//             <DialogTrigger asChild>
//               <Button variant="outline" size="sm">
//                 <Filter className="h-4 w-4 mr-2" />
//                 Filters
//               </Button>
//             </DialogTrigger>
//             <DialogContent className="sm:max-w-[600px]">
//               <DialogHeader>
//                 <DialogTitle>Advanced Filters</DialogTitle>
//               </DialogHeader>

//               <div className="py-4 space-y-4">
//                 {/* Logic operator selector */}
//                 <div className="flex gap-2">
//                   <Button
//                   // variant={filterState.logicalOperator === "AND" ? "default" : "outline"}
//                   // size="sm"
//                   // onClick={() => setFilterState({ ...filterState, logicalOperator: "AND" })}
//                   >
//                     AND
//                   </Button>
//                   <Button
//                   // variant={filterState.logicalOperator === "OR" ? "default" : "outline"}
//                   // size="sm"
//                   // onClick={() => setFilterState({ ...filterState, logicalOperator: "OR" })}
//                   >
//                     OR
//                   </Button>

//                   <div className="ml-auto">
//                     <Button variant="outline" size="sm" onClick={addFilterRule}>
//                       <Plus className="h-4 w-4 mr-1" /> Rule
//                     </Button>
//                   </div>
//                 </div>

//                 {/* Filter criteria */}
//                 {/* <div className="space-y-3">
//                   {filterState.criteria.map((rule, index) => {
//                     const column = autoDetectedColumns.find((col) => col.key === rule.field);
//                     const dataType = column?.type || "string";
//                     const operators = getOperatorsForType(dataType);

//                     return (
//                       <div key={index} className="flex items-center gap-2">
//                         Field selector
//                         <Select
//                           value={rule.field}
//                           onValueChange={(value) => updateFilterRule(index, "field", value)}
//                         >
//                           <SelectTrigger className="w-[180px]">
//                             <SelectValue placeholder="Select field" />
//                           </SelectTrigger>
//                           <SelectContent>
//                             {autoDetectedColumns.map((column) => (
//                               <SelectItem key={column.key} value={column.key}>
//                                 {column.label}
//                               </SelectItem>
//                             ))}
//                           </SelectContent>
//                         </Select>

//                         Operator selector
//                         <Select
//                           value={rule.operator}
//                           onValueChange={(value) => updateFilterRule(index, "operator", value)}
//                         >
//                           <SelectTrigger className="w-[150px]">
//                             <SelectValue placeholder="Operator" />
//                           </SelectTrigger>
//                           <SelectContent>
//                             {operators.map((op) => (
//                               <SelectItem key={op.value} value={op.value}>
//                                 {op.label}
//                               </SelectItem>
//                             ))}
//                           </SelectContent>
//                         </Select>

//                         Value input
//                         <Input
//                           value={rule.value}
//                           onChange={(e) => updateFilterRule(index, "value", e.target.value)}
//                           className="flex-1"
//                           placeholder="Value"
//                         />

//                         Button to remove rule
//                         <Button
//                           variant="ghost"
//                           size="icon"
//                           onClick={() => {
//                             const newRules = [...filterState.criteria];
//                             newRules.splice(index, 1);
//                             setFilterState({ ...filterState, criteria: newRules });
//                           }}
//                         >
//                           <X className="h-4 w-4" />
//                         </Button>
//                       </div>
//                     );
//                   })}

//                   {filterState.criteria.length === 0 && (
//                     <div className="text-center text-muted-foreground py-4">
//                       No filter criteria. Click &quot;Rule&quot; to add one.
//                     </div>
//                   )}
//                 </div> */}
//               </div>

//               <DialogFooter>
//                 <Button
//                   variant="outline"
//                   onClick={() => {
//                     // setFilterState({ logicalOperator: "AND", criteria: [] });
//                     // setActiveFilters({ logicalOperator: "AND", criteria: [] });
//                     setAppliedTags([]);
//                   }}
//                 >
//                   Clear
//                 </Button>
//                 <Button onClick={applyFilter}>Apply</Button>
//               </DialogFooter>
//             </DialogContent>
//           </Dialog>
//         )}

//         {groupable && (
//           <Popover>
//             <PopoverTrigger asChild>
//               <Button variant="outline" size="sm">
//                 <Group className="h-4 w-4 mr-2" />
//                 Group by
//               </Button>
//             </PopoverTrigger>
//             <PopoverContent className="w-[200px] p-0" align="start">
//               <div className="p-2">
//                 <div className="space-y-2">
//                   {autoDetectedColumns.map((column) => (
//                     <Button
//                       key={column.key}
//                       variant={groupByField === column.key ? "default" : "ghost"}
//                       size="sm"
//                       className="w-full justify-start"
//                       onClick={() =>
//                         setGroupByField(groupByField === column.key ? null : column.key)
//                       }
//                     >
//                       {column.label}
//                     </Button>
//                   ))}

//                   {groupByField && (
//                     <Button
//                       variant="outline"
//                       size="sm"
//                       className="w-full mt-2"
//                       onClick={() => setGroupByField(null)}
//                     >
//                       Remove grouping
//                     </Button>
//                   )}
//                 </div>
//               </div>
//             </PopoverContent>
//           </Popover>
//         )}
//       </div>
